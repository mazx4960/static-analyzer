@startuml

abstract class  "Token" {
    TokenType type
    String value
}

class Symbol
class Literal
class Keyword
class Operator
class Separator
class Wildcard

abstract class  "PQL" {
}

abstract class "EvaluationStrategy" {
    EvaluationStrategy getStrategy()
    SubqueryResult evaluate()
    Entity[] getCandidates()
    Entity[] intersect()
}

interface UIInterface {
    void SetQueryString(String)
    Result ExecuteQuery()
}

interface PKBInterface {
    Entity[] getEntities(EntityType)
    Entity[] getByRelationship(RsType, Entity)
    Entity[] getEntitiesByString(String)
}

class QPS {
    void SetPKB()
	Result *EvaluateQuery()
}

class QueryParser {

	void parse(String)
	QueryDeclaration[] getDeclarations(QueryDeclarations[])
	QueryCall[] getQueryCalls(QueryCall[])
}

class QueryBuilder {
	Query build()
	void withDeclarations(QueryDeclarations[])
	void withQueryCalls(QueryCall[])
}

class Lexer {
	Token getNext()
    Token[] lex()
}

class QueryLexer {
	Token getNext()
}

class QueryEvaluator {
	Result evaluate()
}

class SubqueryEvaluator {
	SubqueryResult evaluate()
}

class SubqueryResult {
	SubqueryResult Join()
}

class ResultProjector {
    SubqueryResult Project()
}

Token <|.down. Symbol
Token <|.down. Literal
Token <|.down. Keyword
Token <|.down. Operator
Token <|.down. Separator
Token <|.down. Wildcard


UI -down- UIInterface
PKB -down- PKBInterface

QPS *-up- UIInterface
QPS *-up- PKBInterface
QPS *-down- QueryLexer
QPS *-down- QueryParser
QPS *-down- QueryEvaluator
QPS *-down- QueryBuilder

Lexer <|-down- QueryLexer

QueryLexer *-down- Token

QueryBuilder *-down- PQL

QueryEvaluator *-down- SubqueryEvaluator
QueryEvaluator *-down- SubqueryResult
QueryEvaluator *-down- ResultProjector

SubqueryEvaluator <|-down- EvaluationStrategy
SubqueryEvaluator -right- SubqueryResult
SubqueryResult -right- ResultProjector
@enduml