@startuml

class Query {
    SynonymReference[] getSynonymDeclarations()
    QueryCall getQueryCall()
    QueryClause[] getClauses()
    String toString()
}

abstract QueryReference{
    ReferenceType getRefType()
    EntityPointerUnorderedSet getContext()
    void setContext(EntityPointerUnorderedSet)
    String getReferenceValue()
    String toString()
}

class WildcardReference {
}

class IdentReference {
}

class IntegerReference {
}

abstract ElemReference {
    virtual ReferenceType getRefType()
    virtual QuerySynonym getSynonym()
}

class AttrReference  {
    SynonymReference synonym_reference_;
    AttributeType attribute_type_;
    SynonymReference getSynonymReference()
    AttributeType getAttribute()
}

abstract SynonymReference {
    QuerySynonym query_synonym_
}

class QuerySynonym{
    String synonym_
    String toString()
}
abstract QueryCall {
    CallType type_
    ElemReference[] elem_references_
    ElemReference[] getReferences()
    CallType getCallType()
    String toString()
}

class SelectCall {
}

abstract class QueryClause {
    ClauseType clause_type_
    ClauseType getClauseType()
}

abstract class SuchThatClause {
    RsType type_;
    QueryReference first_;
    QueryReference second_;
    RsType getSuchThatType()
    QueryReference getFirst()
    QueryReference getSecond()
}

class WithClause {
    Comparator comparator_
    QueryReference first_
    QueryReference second_
    Comparator getComparator()
    QueryReference getFirst()
    QueryReference getSecond()
}

class Comparator {
    String toString()
}

class PatternClause  {
    SynonymReference synonym_declaration_
    QueryReference ent_ref_
    ExpressionSpec expression_
    SynonymReference getSynonymDeclaration()
    QueryReference getEntRef()
    ExpressionSpec getExpression()
}


abstract class PatternClause {
    QueryDeclaration getFirst()
    QueryDeclaration getSecond()
    QueryDeclaration getThird()
}

abstract ExpressionSpec {
    String expr_
    bool isWild()
    String toString()
}

class ExactExpression {
}

class WildExpression {
}

interface ICheckSyntax {
    bool isSyntacticallyCorrect()
}

interface ICheckSemantics {
    bool isSemanticallyCorrect()
}

Query *-down- SynonymReference
Query *-down- QueryCall
Query *-down- QueryClause

QueryCall o-down- ElemReference
QueryCall <|-down- SelectCall

ICheckSyntax <|.down QueryReference

QueryReference <|-down- IdentReference
QueryReference <|-down- IntegerReference
QueryReference <|-down- SynonymReference
QueryReference <|-down- AttrReference
QueryReference <|-down- WildcardReference

ElemReference <|-down- SynonymReference
ElemReference <|-down- AttrReference

ExpressionSpec <|-down- ExactExpression
ExpressionSpec <|-down- WildExpression

SynonymReference o-right- QuerySynonym

AttrReference o-right- SynonymReference
AttrReference *-down- AttributeType

ICheckSemantics <|.down QueryClause

QueryClause <|-down- SuchThatClause
QueryClause <|-down- PatternClause
QueryClause <|-down- WithClause

SuchThatClause o-down- QueryReference

PatternClause o-down- QueryReference
PatternClause o-down- SynonymReference
PatternClause *-down- ExpressionSpec

WithClause o-down- QueryReference
WithClause *-down- Comparator
@enduml